{"version":3,"sources":["components/Content/Profile/MyPosts/Posts/Posts.module.scss","components/Content/Dialogs/Dialogs.module.scss","components/Content/Profile/ProfileInfo/ProfileInfo.module.scss","components/Navbar/Navbar.module.scss","components/Footer/Footer.module.scss","components/Header/Header.module.scss","components/Content/Content.module.scss","components/Content/Profile/Profile.module.scss","components/Content/Profile/MyPosts/MyPosts.module.scss","reportWebVitals.ts","images/ava.png","images/ava1.jpeg","images/ava2.jpeg","Redux/profile-reducer.tsx","Redux/dialogs-reducer.tsx","Redux/navbar-reducer.tsx","Redux/music-reduсer.tsx","Redux/settings-reduсer.tsx","Redux/news-reduсer.tsx","Redux/redux-store.tsx","images/gold-elephant.png","components/Header/Header.tsx","components/Content/Profile/ProfileInfo/ProfileInfo.tsx","components/Content/Profile/MyPosts/Posts/Posts.tsx","components/Content/Profile/MyPosts/MyPostsContainer.tsx","components/Content/Profile/MyPosts/MyPosts.tsx","components/Content/Profile/Profile.tsx","components/Content/News/News.tsx","components/Content/Music/Music.tsx","components/Content/Settings/Settings.tsx","components/Content/Dialogs/Message/Message.tsx","components/Content/Dialogs/Dialog/Dialog.tsx","components/Content/Dialogs/AddMessage/AddMessage.tsx","components/Content/Dialogs/DialogsContainer.tsx","components/Content/Dialogs/Dialogs.tsx","components/Content/Content.tsx","components/Navbar/Navbar.tsx","components/Footer/Footer.tsx","App.tsx","index.tsx"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ADD_POST","UPDATE_NEW_POST_TEXT","initialState","myPostsData","id","v1","img","img1","message","likesCount","img2","newPostText","UPDATE_NEW_MESSAGE_TEXT","SEND_MESSAGE","dialogsData","name","messagesData","newMessageText","navigation","pageName","link","rootReducer","combineReducers","profilePage","state","action","type","post","messagesPage","newText","text","navBar","newsPage","musicPage","settingsPage","store","createStore","Header","className","styles","header","src","image","alt","ProfileInfo","props","profileInfo","description","Posts","posts","map","item","postItem","MyPostsContainer","connect","dispatch","addPost","onChangePost","onChangePostCreator","myPosts","value","onChange","e","currentTarget","onClick","Profile","profile","News","news","Music","music","Settings","settings","Message","Dialog","dialog","to","activeClassName","active","AddMessage","newDialogMessage","addMessage","event","changeMessage","placeholder","sendMessageClick","DialogsContainer","onSendMessageClick","updateNewMessageTextActionCreator","dialogsElements","elem","messagesElements","dialogs","dialogsItems","messages","Content","content","path","render","Navbar","navLinkItems","nav","Footer","footer","join","App","rerenderEntireTree","ReactDOM","StrictMode","getState","bind","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.b4648e44.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"Posts_posts__vjRnY\",\"postItem\":\"Posts_postItem__1DDXc\",\"img\":\"Posts_img__13knP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3bw9T\",\"dialogsItems\":\"Dialogs_dialogsItems__4lWE6\",\"messages\":\"Dialogs_messages__3tcxs\",\"active\":\"Dialogs_active__28Z6M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileInfo\":\"ProfileInfo_profileInfo__fhGM0\",\"description\":\"ProfileInfo_description__2RJcI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__3cHYR\",\"active\":\"Navbar_active__21R_N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__7dIj9\",\"active\":\"Footer_active__3wB70\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1v0yI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Content_content__1uhUL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__1BgWt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myPosts\":\"MyPosts_myPosts__1jJZz\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export default __webpack_public_path__ + \"static/media/ava.28e44cb7.png\";","export default __webpack_public_path__ + \"static/media/ava1.4ab0e03f.jpeg\";","export default __webpack_public_path__ + \"static/media/ava2.927a3424.jpeg\";","import {PostItemType} from \"../components/Content/Profile/MyPosts/MyPosts\";\nimport {v1} from \"uuid\";\nimport img from \"../images/ava.png\";\nimport img1 from \"../images/ava1.jpeg\";\nimport img2 from \"../images/ava2.jpeg\";\nimport {ActionType} from \"./redux-store\";\n\nexport type ProfilePageType = {\n  myPostsData: Array<PostItemType>\n  newPostText: string\n}\n\nexport type AddPostActionType = {\n  type: 'ADD_POST'\n}\nexport type UpdateNewPostTextActionType = {\n  type: 'UPDATE_NEW_POST_TEXT'\n  post: string\n}\n\n\nconst ADD_POST = 'ADD_POST'\nconst UPDATE_NEW_POST_TEXT = 'UPDATE_NEW_POST_TEXT'\n\nconst initialState = {\n  myPostsData: [\n    {id: v1(), img: img1, message: 'Hello! How are you', likesCount: 4},\n    {id: v1(), img: img2, message: 'What are doing now?', likesCount: 14},\n  ],\n  newPostText: ''\n}\n\nexport const profileReducer = (state: ProfilePageType = initialState, action: ActionType): ProfilePageType => {\n  switch (action.type) {\n    case ADD_POST:\n      const newPost: PostItemType = {\n        id: v1(),\n        img: img,\n        message: state.newPostText,\n        likesCount: 0\n      }\n      return {\n        ...state,\n        newPostText: '',\n        myPostsData: [...state.myPostsData, {id: v1(), img: img, message: state.newPostText, likesCount: 0}]\n      }\n    case UPDATE_NEW_POST_TEXT:\n      return {\n        ...state,\n        newPostText: action.post\n      }\n    default:\n      return state\n  }\n}\n\ntype AddPostActionCreatorType = () => AddPostActionType\ntype OnChangePostActionCreatorType = (post: string) => UpdateNewPostTextActionType\n\nexport const addPostActionCreator: AddPostActionCreatorType = () => ({\n  type: ADD_POST\n})\n\nexport const onChangePostCreator: OnChangePostActionCreatorType = (post) => ({\n  type: UPDATE_NEW_POST_TEXT,\n  post: post\n})","import {v1} from \"uuid\";\nimport {DialogPropsType} from \"../components/Content/Dialogs/Dialog/Dialog\";\nimport {MessageType} from \"../components/Content/Dialogs/Message/Message\";\nimport {ActionType} from \"./redux-store\";\n\nexport type MessagesPageType = {\n  dialogsData: Array<DialogPropsType>\n  messagesData: Array<MessageType>\n  newMessageText: string\n}\n\nexport type AddMessageActionType = {\n  type: 'SEND_MESSAGE'\n}\n\nexport type UpdateNewMessageTextActionType = {\n  type: 'UPDATE_NEW_MESSAGE_TEXT',\n  newText: string,\n}\n\nconst UPDATE_NEW_MESSAGE_TEXT = 'UPDATE_NEW_MESSAGE_TEXT'\nconst SEND_MESSAGE = 'SEND_MESSAGE'\n\nconst initialState = {\n  dialogsData: [\n    {id: v1(), name: 'Ann'},\n    {id: v1(), name: 'Nick'},\n    {id: v1(), name: 'Jhon'},\n    {id: v1(), name: 'Jane'},\n  ],\n  messagesData: [\n    {id: v1(), message: 'Hello'},\n    {id: v1(), message: 'How are you?'},\n  ],\n  newMessageText: '',\n}\n\nexport const dialogsReducer = (state: MessagesPageType = initialState, action: ActionType): MessagesPageType => {\n  switch (action.type) {\n    case UPDATE_NEW_MESSAGE_TEXT:\n      return {\n        ...state,\n        newMessageText: action.newText\n      }\n    case SEND_MESSAGE:\n      let text = state.newMessageText\n      return {\n        ...state,\n        newMessageText: '',\n        messagesData: [...state.messagesData, {id: v1(), message: text}]\n      }\n    default:\n      return state\n  }\n}\n\ntype AddMessageCreatorType = () => AddMessageActionType\ntype UpdateNewMessageTextCreatorType = (text: string) => UpdateNewMessageTextActionType\n\nexport const addMessageActionCreator: AddMessageCreatorType = () => ({type: SEND_MESSAGE})\nexport const updateNewMessageTextActionCreator: UpdateNewMessageTextCreatorType = (text) => ({\n  type: UPDATE_NEW_MESSAGE_TEXT,\n  newText: text,\n})\n","import {NavigationType} from \"../components/Navbar/Navbar\";\nimport {v1} from \"uuid\";\nimport {ActionType} from \"./redux-store\";\n\nexport type NavBarType = {\n  navigation: Array<NavigationType>\n}\n\nconst initialState = {\n  navigation: [\n    {id: v1(), pageName: 'Profile', link: '/profile'},\n    {id: v1(), pageName: 'Messages', link: '/dialogs'},\n    {id: v1(), pageName: 'News', link: '/news'},\n    {id: v1(), pageName: 'Music', link: '/music'},\n    {id: v1(), pageName: 'Settings', link: '/settings'},\n  ]\n}\n\nexport const navbarReducer = (state: NavBarType = initialState, action: ActionType) => {\n  return state\n}","\n\nconst initialState = {}\n\nexport const musicReducer = (state: any = initialState, action: any) => {\n  return state\n}","\n\nconst initialState = {}\n\nexport const settingsReducer = (state: any = initialState, action: any) => {\n  return state\n}","\n\nconst initialState = {}\n\nexport const newsReducer = (state: any = initialState, action: any) => {\n  return state\n}","import {combineReducers, createStore} from \"redux\";\nimport {AddPostActionType, profileReducer, UpdateNewPostTextActionType} from \"./profile-reducer\";\nimport {AddMessageActionType, dialogsReducer, UpdateNewMessageTextActionType} from \"./dialogs-reducer\";\nimport {navbarReducer} from \"./navbar-reducer\";\nimport {musicReducer} from \"./music-reduсer\";\nimport {settingsReducer} from \"./settings-reduсer\";\nimport {newsReducer} from \"./news-reduсer\";\nimport {NavigationType} from \"../components/Navbar/Navbar\";\nimport {PostItemType} from \"../components/Content/Profile/MyPosts/MyPosts\";\nimport {DialogPropsType} from \"../components/Content/Dialogs/Dialog/Dialog\";\nimport {MessageType} from \"../components/Content/Dialogs/Message/Message\";\n\nexport type StateType = {\n  navBar: {\n    navigation: Array<NavigationType>\n  }\n\n  profilePage: {\n    myPostsData: Array<PostItemType>\n    newPostText: string\n  }\n\n  messagesPage: {\n    dialogsData: Array<DialogPropsType>\n    messagesData: Array<MessageType>\n  }\n\n  newsPage: {}\n  musicPage: {}\n  settingsPage: {}\n}\nexport type ActionType = AddPostActionType | UpdateNewPostTextActionType |\n  AddMessageActionType | UpdateNewMessageTextActionType\n\nlet rootReducer = combineReducers({\n  profilePage: profileReducer,\n  messagesPage: dialogsReducer,\n  navBar: navbarReducer,\n  newsPage: newsReducer,\n  musicPage: musicReducer,\n  settingsPage: settingsReducer\n})\n\nexport let store = createStore(rootReducer)\n\n//rootReducer возвращает State всего приложения\nexport type AppStateType = ReturnType<typeof rootReducer>\n// export type StoreType = typeof store","export default __webpack_public_path__ + \"static/media/gold-elephant.8fa88fbe.png\";","import image from \"../../images/gold-elephant.png\";\nimport React from \"react\";\nimport styles from './Header.module.scss'\n\nexport const Header = () => {\n    return (\n        <header className={styles.header}>\n            <div>\n                <img src={image} alt=\"ff\"/>\n            </div>\n            <h1>Social network \"GOLDEN ELEPHANT\"</h1>\n        </header>\n    )\n}","import React from 'react'\nimport styles from './ProfileInfo.module.scss'\n\nexport const ProfileInfo = (props: any) => {\n  return (\n    <div className={styles.profileInfo}>\n      <div>\n        <img\n          src={\n            'https://v-thailand.com/wp-content/uploads/2017/12/Slonyi-v-Tailande-2.jpg'\n          }\n          alt={'img'}\n        />\n      </div>\n      <div className={styles.description}>\n        ava + description\n      </div>\n\n    </div>\n  )\n}\n","import React from 'react'\nimport styles from './Posts.module.scss'\nimport { PostItemType } from '../MyPosts'\n\ntype PropsType = {\n  posts: Array<PostItemType>\n}\n\nconst Posts: React.FC<PropsType> = ({posts}:PropsType) => {\n  return (\n    <div className={styles.posts}>\n      {posts.map((item: PostItemType) => (\n        <div className={styles.postItem} key={item.id}>\n          <img className={styles.img} src={item.img} alt=\"ava\" />\n          {item.message}\n          <p>Likes <span>{item.likesCount }</span></p>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default Posts\n","import {addPostActionCreator, onChangePostCreator, ProfilePageType} from \"../../../../Redux/profile-reducer\";\nimport {MyPosts} from \"./MyPosts\";\nimport {AppStateType} from \"../../../../Redux/redux-store\";\nimport {connect} from \"react-redux\";\nimport {Dispatch} from \"redux\";\n\ntype mapStateToPropsType = {\n  profilePage: ProfilePageType\n}\ntype mapDispatchToPropsType = {\n  addPost: () => void\n  onChangePost: (post: string) => void\n}\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n  return {\n    profilePage: state.profilePage\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\n  return {\n    addPost: () => {\n      dispatch(addPostActionCreator())\n    },\n    onChangePost: (post: string) => {\n      if(post) dispatch(onChangePostCreator(post))\n    }\n  }\n}\n\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n","import React, {ChangeEvent} from 'react'\nimport styles from './MyPosts.module.scss'\nimport Posts from './Posts/Posts'\n\ntype MyPostsPropsType = {\n  profilePage: {\n    myPostsData: Array<PostItemType>\n    newPostText: string\n  }\n  addPost: () => void\n  onChangePost: (post: string) => void\n}\nexport type PostItemType = {\n  id: string\n  img: string\n  message: string\n  likesCount: number\n}\n\nexport const MyPosts = ({profilePage, ...props}: MyPostsPropsType) => {\n  const addPost = () => {\n    props.addPost()\n  }\n\n  const onChangePost = (e: ChangeEvent<HTMLTextAreaElement>) => {\n    const post = e.currentTarget.value\n    if(post) props.onChangePost(post)\n  }\n\n  return (\n    <div className={styles.myPosts}>\n      <h2>MyPosts</h2>\n      <p>\n        <textarea\n          value={profilePage.newPostText}\n          onChange={onChangePost}\n        />\n      </p>\n      <p>\n        <button onClick={addPost}>Add post</button>\n      </p>\n      <Posts posts={profilePage.myPostsData}/>\n    </div>\n  )\n}\n","import React from 'react'\nimport styles from './Profile.module.scss'\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\n\nexport const Profile = () => {\n  return (\n    <div className={styles.profile}>\n      <ProfileInfo/>\n      <MyPostsContainer/>\n    </div>\n  )\n}\n","import React from 'react'\nimport styles from './News.module.scss'\n\nexport const News = (props: any) => {\n    return (\n        <div className={styles.news}>\n            News\n        </div>\n    )\n}\n","import React from 'react'\nimport styles from './Music.module.scss'\n\nexport const Music = (props: any) => {\n    return (\n        <div className={styles.music}>\n            Music\n        </div>\n    )\n}\n","import React from 'react'\nimport styles from './Settings.module.scss'\n\nexport const Settings = (props: any) => {\n  return (\n    <div className={styles.settings}>\n      Settings\n    </div>\n  )\n}\n","import React from 'react'\nimport styles from './Message.module.scss'\n\nexport type MessageType = {\n  message: string\n  id: string\n}\n\nexport const Message = (props: MessageType) => {\n  return (\n    <div className={styles.message}>{props.message}</div>\n  )\n}","import React from 'react'\nimport styles from './Dialog.module.scss'\nimport {NavLink} from 'react-router-dom'\n\nexport type DialogPropsType = {\n  name: string\n  id: string\n}\n\nexport const Dialog = (props: DialogPropsType) => {\n  return (\n    <div className={styles.dialog}>\n      <NavLink to={`/dialogs/${props.id}`} activeClassName={styles.active}>{props.name}</NavLink>\n    </div>\n  )\n}\n","import React, {ChangeEvent} from 'react'\nimport styles from './AddMessage.module.scss'\nimport {DialogPropsType} from \"../Dialog/Dialog\";\nimport {MessageType} from \"../Message/Message\";\n\ntype AddMessagePropsType = {\n  sendMessageClick: () => void\n  changeMessage: (text: string) => void\n  messagesPage: {\n    dialogsData: Array<DialogPropsType>\n    messagesData: Array<MessageType>\n    newMessageText: string\n  }\n  newDialogMessage: string\n}\n\nexport const AddMessage:React.FC<AddMessagePropsType>  = ({messagesPage, newDialogMessage, ...props}) => {\n  const onChangeMessage = (event: ChangeEvent<HTMLTextAreaElement>) => {\n    const text = event.currentTarget.value\n    if (text) props.changeMessage(text)\n  }\n  const onSendMessageClick = () => {\n    props.sendMessageClick()\n  }\n\n  return (\n    <div className={styles.addMessage}>\n      <div>\n          <textarea\n            onChange={onChangeMessage}\n            value={newDialogMessage}\n            placeholder=\"Enter your message\"\n          />\n      </div>\n      <div>\n        <button onClick={onSendMessageClick}>Send message</button>\n      </div>\n    </div>\n  )\n}","import {Dialogs} from \"./Dialogs\";\nimport {AppStateType} from \"../../../Redux/redux-store\";\nimport {\n  addMessageActionCreator,\n  MessagesPageType,\n  updateNewMessageTextActionCreator\n} from \"../../../Redux/dialogs-reducer\";\nimport {connect} from \"react-redux\";\nimport {Dispatch} from \"redux\";\n\ntype mapStateToPropsType = {\n  messagesPage: MessagesPageType\n  newDialogMessage: string\n}\ntype mapDispatchToPropsType = {\n  onSendMessageClick: () => void\n  changeMessage: (text: string) => void\n}\n\nconst mapStateToProps = (state: AppStateType): mapStateToPropsType => {\n  return {\n    messagesPage: state.messagesPage,\n    newDialogMessage: state.messagesPage.newMessageText\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\n  return {\n    onSendMessageClick: () => {\n      dispatch(addMessageActionCreator())\n    },\n    changeMessage: (text: string) => {\n      if (text) dispatch(updateNewMessageTextActionCreator(text))\n    }\n  }\n}\n\nexport const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs)\n\n","import React from 'react'\nimport styles from './Dialogs.module.scss'\nimport {Message, MessageType} from \"./Message/Message\";\nimport {Dialog, DialogPropsType} from \"./Dialog/Dialog\";\nimport {AddMessage} from \"./AddMessage/AddMessage\";\n\ntype DialogsPropsType = {\n  messagesPage: {\n    dialogsData: Array<DialogPropsType>\n    messagesData: Array<MessageType>\n    newMessageText: string\n  }\n  onSendMessageClick: () => void\n  changeMessage: (text:string) => void\n  newDialogMessage: string\n}\n\nexport const Dialogs:React.FC<DialogsPropsType> = ({messagesPage, onSendMessageClick, changeMessage, newDialogMessage}) => {\n  const dialogsElements = messagesPage.dialogsData.map((elem: DialogPropsType) => (\n    <Dialog\n      key={elem.id}\n      name={elem.name}\n      id={elem.id}\n    />\n  ))\n\n  const messagesElements = messagesPage.messagesData.map((elem: MessageType) => (\n    <Message\n      key={elem.id}\n      message={elem.message}\n      id={elem.id}\n    />\n  ))\n\n  return (\n    <div className={styles.dialogs}>\n      <div className={styles.dialogsItems}>\n        {dialogsElements}\n      </div>\n      <div className={styles.messages}>\n        {messagesElements}\n        <AddMessage\n          newDialogMessage={newDialogMessage}\n          messagesPage={messagesPage}\n          sendMessageClick={onSendMessageClick}\n          changeMessage={changeMessage}\n        />\n      </div>\n    </div>\n  )\n}\n\n","import React from 'react'\nimport {Route} from 'react-router-dom'\nimport styles from \"./Content.module.scss\"\nimport {Profile} from './Profile/Profile'\nimport {News} from \"./News/News\";\nimport {Music} from \"./Music/Music\";\nimport {Settings} from \"./Settings/Settings\";\nimport {PostItemType} from \"./Profile/MyPosts/MyPosts\";\nimport {MessageType} from \"./Dialogs/Message/Message\";\nimport {DialogPropsType} from \"./Dialogs/Dialog/Dialog\";\nimport {ActionType} from \"../../Redux/redux-store\";\nimport {DialogsContainer} from \"./Dialogs/DialogsContainer\";\n\ntype ContentPropsType = {\n  profilePage: {\n    myPostsData: Array<PostItemType>\n    newPostText: string\n  }\n  messagesPage: {\n    dialogsData: Array<DialogPropsType>\n    messagesData: Array<MessageType>\n    newMessageText: string\n  }\n  dispatch: (action: ActionType) => void\n  newsPage: {}\n  musicPage: {}\n  settingsPage: {}\n}\n\nexport const Content = (props: ContentPropsType) => {\n    return (\n        <main className={styles.content}>\n            <Route path=\"/profile\" render={() => <Profile/>} />\n            <Route path=\"/dialogs\" render={() => <DialogsContainer/>} />\n            <Route path=\"/news\" render={() => <News/>}/>\n            <Route path=\"/music\" render={() => <Music/>}/>\n            <Route path=\"/settings\" render={() => <Settings />}/>\n        </main>\n    )\n}\n","import React from \"react\";\nimport styles from './Navbar.module.scss'\nimport {NavLink} from 'react-router-dom'\n\nexport type NavigationType = {\n  id: string\n  pageName : string\n  link : string\n}\n\ntype NavBarPropsType = {\n  navBar: {\n    navigation: Array<NavigationType>\n  }\n}\n\nexport const Navbar = (props:NavBarPropsType) => {\n  const navLinkItems = props.navBar.navigation.map(item => (\n    <NavLink key={item.id} to={item.link} activeClassName={styles.active}>{item.pageName}</NavLink>\n  ))\n    return (\n        <nav className={styles.nav}>\n          {navLinkItems}\n        </nav>\n    )\n}","import React from \"react\";\nimport styles from \"./Footer.module.scss\"\n\nexport const Footer = () => {\n    return (\n        <footer className={[styles.footer, styles.active].join(' ')}>Footer</footer>\n    )\n}","import React from 'react'\nimport './App.scss'\nimport {Header} from './components/Header/Header'\nimport {Content} from './components/Content/Content'\nimport {Navbar, NavigationType} from './components/Navbar/Navbar'\nimport {Footer} from './components/Footer/Footer'\nimport {BrowserRouter} from 'react-router-dom'\nimport {PostItemType} from \"./components/Content/Profile/MyPosts/MyPosts\";\nimport {DialogPropsType} from \"./components/Content/Dialogs/Dialog/Dialog\";\nimport {MessageType} from \"./components/Content/Dialogs/Message/Message\";\nimport {ActionType} from \"./Redux/redux-store\";\n\ntype AppPropsType = {\n  state: {\n    navBar: {\n      navigation: Array<NavigationType>\n    }\n\n    profilePage: {\n      myPostsData: Array<PostItemType>\n      newPostText: string\n    }\n\n    messagesPage: {\n      dialogsData: Array<DialogPropsType>\n      messagesData: Array<MessageType>\n      newMessageText: string\n    }\n\n    newsPage: {}\n    musicPage: {},\n    settingsPage: {}\n  }\n  dispatch: (action: ActionType) => void\n}\n\nconst App = (props: AppPropsType) => {\n  return (\n    <BrowserRouter>\n      <div className=\"app\">\n        <Header/>\n        <Navbar navBar={props.state.navBar}/>\n        <Content\n          profilePage={props.state.profilePage}\n          messagesPage={props.state.messagesPage}\n          newsPage={props.state.newsPage}\n          musicPage={props.state.musicPage}\n          settingsPage={props.state.settingsPage}\n          dispatch={props.dispatch}\n        />\n        <Footer/>\n      </div>\n    </BrowserRouter>\n  )\n}\n\nexport default App\n","import reportWebVitals from './reportWebVitals';\nimport {StateType, store} from \"./Redux/redux-store\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from \"react-redux\";\n\nexport type rerenderEntireTreeType = (state:StateType)=>void\n\nconst rerenderEntireTree:rerenderEntireTreeType = () => {\n  ReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n      <App\n        state={store.getState()}\n        dispatch={store.dispatch.bind(store)}\n      />\n      </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n}\n\nrerenderEntireTree(store.getState())\n\nstore.subscribe(() => {\n  let state = store.getState()\n  rerenderEntireTree(state)\n})\n\nreportWebVitals();\n"],"sourceRoot":""}